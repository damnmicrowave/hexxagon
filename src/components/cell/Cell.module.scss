.cellBox {
  // we choose the base height so that 9 hexagons would fit into 100% of the screen height
  --cell-height: calc(100vh / 9);
  // hexagon width equals to its height divided by 2 and multiplied by square root of 3
  --cell-width: calc(var(--cell-height) / 2 * 1.7320508075688772);

  // these variables will be replaced with cell coordinates in the component
  // we use axial coordinate system as described in this article: https://www.redblobgames.com/grids/hexagons/
  --q: 0;
  --r: 0;

  // now we need to convert axial coordinates into regular x/y offsets
  --x-offset: calc((var(--q)) + (var(--r) * 0.5));
  --y-offset: calc(var(--r) * 0.75);

  position: absolute;
  // here we multiply hexagon's dimensions by calculated offsets
  // also we scale hexagons down a little so that they have space between
  transform: translateX(calc(var(--cell-width) * var(--x-offset)))
    translateY(calc(var(--cell-height) * var(--y-offset))) scale(0.95);
  // make all transforms relative to the center of the element
  transform-origin: center center;

  // ignore mouse events on this element
  pointer-events: none;

  // change background color on hover
  // we use custom class instead of :hover selector because hexagons'
  // square borders overlap
  &.hovered:not(.empty),
  &.hovered.highlighted {
    // enable mouse events so the cursor can "see" the element and change its appearance
    pointer-events: all;

    .hexagon {
      background-color: #649cfc;
      cursor: pointer;
    }
  }

  // only empty cells can be highlighted
  &.highlighted:is(.empty) .hexagon {
    top: 3px;
    left: 3px;

    width: calc(100% - 6px);
    height: calc(100% - 6px);
  }
}

.hexagonBox {
  position: relative;

  width: var(--cell-width);
  height: var(--cell-height);
}

// this element represents hexagonal shape of the cell
.hexagon {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;

  width: 100%;
  height: 100%;

  background-color: #7d61ff;

  transition: background-color 0.3s;

  // copied from https://bennettfeely.com/clippy/
  clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);
}

.highlighting {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 0;

  width: 100%;
  height: 100%;

  background-color: var(--hightlight-color);

  clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);
}

// states
.white .hexagon:after,
.black .hexagon:after {
  position: absolute;
  top: 50%;
  left: 50%;

  width: calc(var(--cell-height) / 2);
  height: calc(var(--cell-height) / 2);

  border-radius: 50%;
  box-shadow: 3px 3px 10px rgba(black, 0.3);

  transform: translateX(-50%) translateY(-50%);

  content: '';
}

.white .hexagon:after {
  background-image: radial-gradient(
    farthest-corner at 30% 30%,
    white 0%,
    #aaa 70%
  );
}

.black .hexagon:after {
  background-image: radial-gradient(
    farthest-corner at 30% 30%,
    #555 0%,
    black 70%
  );
}
