{"version":3,"sources":["webpack://src/components/cell/Cell.module.scss","webpack://src/components/board/Board.module.scss","webpack://src/components/header/Header.module.scss","webpack://src/app/App.scss"],"names":[],"mappings":"AAAA,qBAEE,wBAAA,CAEA,+CAAA,CAIA,KAAA,CACA,KAAA,CAGA,wCAAA,CACA,8BAAA,CAEA,iBAAA,CAGA,qIAAA,CAAA,6HAAA,CAGA,sCAAA,CAAA,8BAAA,CAGA,mBAAA,CAKA,kIAGE,kBAAA,CAEA,4KACE,wBAAA,CACA,cAAA,CAKJ,yFACE,OAAA,CACA,QAAA,CAEA,sBAAA,CACA,uBAAA,CAIJ,wBACE,iBAAA,CAEA,uBAAA,CACA,yBAAA,CAIF,qBAIE,SAAA,CAKA,wBAAA,CAEA,+BAGA,CAGF,+CAhBE,iBAAA,CACA,KAAA,CACA,MAAA,CAGA,UAAA,CACA,WAAA,CAOA,uEAAA,CAAA,+DAcA,CAXF,0BAIE,SAAA,CAKA,wCAEA,CAIF,4FAEE,iBAAA,CACA,OAAA,CACA,QAAA,CAEA,gCAAA,CACA,iCAAA,CAEA,iBAAA,CACA,sCAAA,CAEA,mDAAA,CAAA,2CAAA,CAEA,UAAA,CAGF,8CACE,4EAAA,CAOF,8CACE,4EAAA,CCpHF,oBACE,iBAAA,CAEA,oBAAA,CAAA,YAAA,CACA,0BAAA,CAAA,kBAAA,CACA,8BAAA,CAAA,sBAAA,CACA,UAAA,CACA,WAAA,CCPF,sBACE,cAAA,CACA,KAAA,CACA,MAAA,CAEA,UAAA,CACA,WAAA,CACA,iBAAA,CAEA,aAAA,CACA,iBAAA,CAEA,cAAA,CAEA,wBAAA,CAAA,oBAAA,CAAA,gBAAA,CAEA,0CACE,UAAA,CAEA,wBAAA,CAGF,0CACE,UAAA,CAEA,wBAAA,CCzBJ,WACE,eAAA,CACA,wBAAA,CACA,iBAAA,CACA,2EACA,CAAA,kBAIA,CAAA,EAAA,qBAKA,CAAA,SAAA,cAGF,CAAA,0BAUE,YAAA,CAAA,eAGF,CAAA,qDAYA,SAAA,CAAA,iCAMA,WAAA,CAAA,gBAMA,WACE,CAAA,KACA,QAAA,CAAA,gBAEA,CAAA,iCAEA,CAAA,wBAEA,CAAA,cACA,CAAA,kCACA,CAAA,iCAAA","file":"main.160a0fcd.chunk.css","sourcesContent":[".cellBox {\n  // we choose the base height so that 9 hexagons would fit into 100% of the screen height\n  --cell-height: calc(100vh / 9);\n  // hexagon width equals to its height divided by 2 and multiplied by square root of 3\n  --cell-width: calc(var(--cell-height) / 2 * 1.7320508075688772);\n\n  // these variables will be replaced with cell coordinates in the component\n  // we use axial coordinate system as described in this article: https://www.redblobgames.com/grids/hexagons/\n  --q: 0;\n  --r: 0;\n\n  // now we need to convert axial coordinates into regular x/y offsets\n  --x-offset: calc((var(--q)) + (var(--r) * 0.5));\n  --y-offset: calc(var(--r) * 0.75);\n\n  position: absolute;\n  // here we multiply hexagon's dimensions by calculated offsets\n  // also we scale hexagons down a little so that they have space between\n  transform: translateX(calc(var(--cell-width) * var(--x-offset)))\n    translateY(calc(var(--cell-height) * var(--y-offset))) scale(0.95);\n  // make all transforms relative to the center of the element\n  transform-origin: center center;\n\n  // ignore mouse events on this element\n  pointer-events: none;\n\n  // change background color on hover\n  // we use custom class instead of :hover selector because hexagons'\n  // square borders overlap\n  &.hovered:not(.empty),\n  &.hovered.highlighted {\n    // enable mouse events so the cursor can \"see\" the element and change its appearance\n    pointer-events: all;\n\n    .hexagon {\n      background-color: #649cfc;\n      cursor: pointer;\n    }\n  }\n\n  // only empty cells can be highlighted\n  &.highlighted:is(.empty) .hexagon {\n    top: 3px;\n    left: 3px;\n\n    width: calc(100% - 6px);\n    height: calc(100% - 6px);\n  }\n}\n\n.hexagonBox {\n  position: relative;\n\n  width: var(--cell-width);\n  height: var(--cell-height);\n}\n\n// this element represents hexagonal shape of the cell\n.hexagon {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n\n  width: 100%;\n  height: 100%;\n\n  background-color: #7d61ff;\n\n  transition: background-color 0.3s;\n\n  // copied from https://bennettfeely.com/clippy/\n  clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);\n}\n\n.highlighting {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 0;\n\n  width: 100%;\n  height: 100%;\n\n  background-color: var(--hightlight-color);\n\n  clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);\n}\n\n// states\n.white .hexagon:after,\n.black .hexagon:after {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n\n  width: calc(var(--cell-height) / 2);\n  height: calc(var(--cell-height) / 2);\n\n  border-radius: 50%;\n  box-shadow: 3px 3px 10px rgba(black, 0.3);\n\n  transform: translateX(-50%) translateY(-50%);\n\n  content: '';\n}\n\n.white .hexagon:after {\n  background-image: radial-gradient(\n    farthest-corner at 30% 30%,\n    white 0%,\n    #aaa 70%\n  );\n}\n\n.black .hexagon:after {\n  background-image: radial-gradient(\n    farthest-corner at 30% 30%,\n    #555 0%,\n    black 70%\n  );\n}\n",".board {\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n",".header {\n  position: fixed;\n  top: 0;\n  left: 0;\n\n  width: 100%;\n  height: 10vh;\n  padding-top: 2.5vh;\n\n  font-size: 5vh;\n  text-align: center;\n\n  transition: 0.5s;\n\n  user-select: none;\n\n  &.white {\n    color: black;\n\n    background-color: #f2f2f2;\n  }\n\n  &.black {\n    color: white;\n\n    background-color: #0d0d0d;\n  }\n}\n","@font-face {\n  font-weight: 400;\n  font-family: 'PressStart';\n  font-style: normal;\n  src: url('./PressStart2P-Regular.ttf') format('truetype');\n  font-display: block;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbutton,\na {\n  cursor: pointer;\n}\n\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nul,\nol {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\na,\nbutton,\ndiv,\ninput,\nlabel,\nselect,\nspan,\nstrong,\ntextarea {\n  outline: 0;\n}\n\ninput,\ntextarea,\n*[contenteditable] {\n  cursor: text;\n}\n\nhtml,\nbody,\n#root {\n  height: 100%;\n}\n\nbody {\n  margin: 0;\n  padding-top: 10vh;\n\n  font-family: PressStart, sans-serif;\n\n  background-color: #1d3052;\n\n  cursor: default;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n"]}